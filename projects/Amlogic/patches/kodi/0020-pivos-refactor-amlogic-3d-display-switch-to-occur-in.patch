From 5289af72dd9189329c277a869d0929981a6a09fa Mon Sep 17 00:00:00 2001
From: davilla <davilla@4pi.com>
Date: Thu, 6 Mar 2014 21:09:39 -0500
Subject: [PATCH 20/27] pivos: refactor amlogic 3d display switch to occur in
 Renderer

---
 xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp |   47 -----------
 xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.h   |    2 -
 xbmc/rendering/gles/RenderSystemGLES.cpp          |   18 ++--
 xbmc/rendering/gles/RenderSystemGLES.h            |    1 +
 xbmc/utils/AMLUtils.cpp                           |   92 +++++++++++++++++++--
 xbmc/utils/AMLUtils.h                             |    3 +-
 xbmc/utils/SystemInfo.cpp                         |   17 ++++
 xbmc/utils/SystemInfo.h                           |    3 +
 8 files changed, 116 insertions(+), 67 deletions(-)

diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp
index f66a3c9..315155c 100644
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp
@@ -1348,7 +1348,6 @@ CAMLCodec::CAMLCodec() : CThread("CAMLCodec")
   m_dll = new DllLibAmCodec;
   m_dll->Load();
   am_private->m_dll = m_dll;
-  m_hdmi3dmode = false;
 }
 
 
@@ -1612,13 +1611,6 @@ bool CAMLCodec::OpenDecoder(CDVDStreamInfo &hints)
 void CAMLCodec::CloseDecoder()
 {
   CLog::Log(LOGDEBUG, "CAMLCodec::CloseDecoder");
-
-  if (m_hdmi3dmode)
-  {
-    SetHDMI3dMode("3doff");
-    m_hdmi3dmode = false;
-  }
-
   StopThread();
 
   g_renderManager.RegisterRenderUpdateCallBack((const void*)NULL, NULL);
@@ -2047,23 +2039,6 @@ void CAMLCodec::SetVideo3dMode(const int mode3d)
   aml_set_sysfs_int("/sys/class/ppmgr/ppmgr_3d_mode", mode3d);
 }
 
-void CAMLCodec::SetHDMI3dMode(const char *mode3d)
-{
-  CLog::Log(LOGDEBUG, "CAMLCodec::SetHDMI3dMode:mode3d(%s)", mode3d);
-  aml_set_sysfs_str("/sys/class/amhdmitx/amhdmitx0/config", mode3d);
-  if (strstr(mode3d, "3doff"))
-  {
-    // Some 3D HDTVs will not exit from 3D mode with 3doff
-    char disp_mode[256] = {};
-    if (aml_get_sysfs_str("/sys/class/display/mode", disp_mode, 255) != -1)
-      aml_set_sysfs_str("/sys/class/amhdmitx/amhdmitx0/disp_mode", disp_mode);
-  }
-  else
-  {
-    m_hdmi3dmode = true;
-  }
-}
-
 std::string CAMLCodec::GetStereoMode()
 {
   std::string  stereo_mode;
@@ -2075,8 +2050,6 @@ std::string CAMLCodec::GetStereoMode()
     default:                                  stereo_mode = m_hints.stereo_mode; break;
   }
 
-  if(CMediaSettings::Get().GetCurrentVideoSettings().m_StereoInvert)
-    stereo_mode = RenderManager::GetStereoModeInvert(stereo_mode);
   return stereo_mode;
 }
 
@@ -2210,43 +2183,23 @@ void CAMLCodec::SetVideoRect(const CRect &SrcRect, const CRect &DestRect)
   {
     dst_rect.x2 *= 2.0;
     SetVideo3dMode(MODE_3D_DISABLE);
-    if (aml_3dmode_present(m_stereo_mode))
-      SetHDMI3dMode("3dlr");
   }
   else if (m_stereo_mode == RENDER_STEREO_MODE_SPLIT_HORIZONTAL)
   {
     dst_rect.y2 *= 2.0;
     SetVideo3dMode(MODE_3D_DISABLE);
-    if (aml_3dmode_present(m_stereo_mode))
-      SetHDMI3dMode("3dtb");
   }
   else if (m_stereo_mode == RENDER_STEREO_MODE_INTERLACED)
   {
     std::string mode = GetStereoMode();
     if (mode == "left_right")
-    {
       SetVideo3dMode(MODE_3D_LR);
-      if (aml_3dmode_present(m_stereo_mode))
-        SetHDMI3dMode("3dlr");
-    }
     else if (mode == "right_left")
-    {
       SetVideo3dMode(MODE_3D_LR_SWITCH);
-      if (aml_3dmode_present(m_stereo_mode))
-        SetHDMI3dMode("3dlr");
-    }
     else if (mode == "row_interleaved_lr")
-    {
       SetVideo3dMode(MODE_3D_LR);
-      if (aml_3dmode_present(m_stereo_mode))
-        SetHDMI3dMode("3dtb");
-    }
     else if (mode == "row_interleaved_rl")
-    {
       SetVideo3dMode(MODE_3D_LR_SWITCH);
-      if (aml_3dmode_present(m_stereo_mode))
-        SetHDMI3dMode("3dtb");
-    }
     else
       SetVideo3dMode(MODE_3D_DISABLE);
   }
diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.h b/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.h
index 297331c..3aa025d 100644
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.h
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.h
@@ -60,7 +60,6 @@ private:
   void          SetVideoSaturation(const int saturation);
   void          GetRenderFeatures(Features &renderFeatures);
   void          SetVideo3dMode(const int mode3d);
-  void          SetHDMI3dMode(const char *mode3d);
   std::string   GetStereoMode();
   static void   RenderFeaturesCallBack(const void *ctx, Features &renderFeatures);
   void          SetVideoRect(const CRect &SrcRect, const CRect &DestRect);
@@ -90,5 +89,4 @@ private:
   float            m_zoom;
   int              m_contrast;
   int              m_brightness;
-  bool             m_hdmi3dmode;
 };
diff --git a/xbmc/rendering/gles/RenderSystemGLES.cpp b/xbmc/rendering/gles/RenderSystemGLES.cpp
index 653c9ec..fab2528 100644
--- a/xbmc/rendering/gles/RenderSystemGLES.cpp
+++ b/xbmc/rendering/gles/RenderSystemGLES.cpp
@@ -656,17 +656,19 @@ GLint CRenderSystemGLES::GUIShaderGetCoord0Matrix()
   return -1;
 }
 
+void CRenderSystemGLES::SetStereoMode(RENDER_STEREO_MODE mode, RENDER_STEREO_VIEW view)
+{
+  CRenderSystemBase::SetStereoMode(mode, view);
+
+  g_sysinfo.HWSetStereoMode(mode, view);
+}
+
 bool CRenderSystemGLES::SupportsStereo(RENDER_STEREO_MODE mode)
 {
-  switch(mode)
-  {
-    case RENDER_STEREO_MODE_INTERLACED:
-      if (g_sysinfo.HasHW3DInterlaced())
-        return true;
+  if (g_sysinfo.HWSupportsStereo(mode))
+    return true;
 
-    default:
-      return CRenderSystemBase::SupportsStereo(mode);
-  }
+  return CRenderSystemBase::SupportsStereo(mode);
 }
 
 #endif
diff --git a/xbmc/rendering/gles/RenderSystemGLES.h b/xbmc/rendering/gles/RenderSystemGLES.h
index 98e398a..547aadd 100644
--- a/xbmc/rendering/gles/RenderSystemGLES.h
+++ b/xbmc/rendering/gles/RenderSystemGLES.h
@@ -73,6 +73,7 @@ public:
 
   virtual void ApplyHardwareTransform(const TransformMatrix &matrix);
   virtual void RestoreHardwareTransform();
+  virtual void SetStereoMode(RENDER_STEREO_MODE mode, RENDER_STEREO_VIEW view);
   virtual bool SupportsStereo(RENDER_STEREO_MODE mode);
 
   virtual bool TestRender();
diff --git a/xbmc/utils/AMLUtils.cpp b/xbmc/utils/AMLUtils.cpp
index a25dbdd..a80d0c5 100644
--- a/xbmc/utils/AMLUtils.cpp
+++ b/xbmc/utils/AMLUtils.cpp
@@ -27,12 +27,26 @@
 
 #include "AMLUtils.h"
 #include "rendering/RenderSystem.h"
+#include "settings/MediaSettings.h"
 #include "utils/CPUInfo.h"
 #include "utils/log.h"
 #include "utils/StringUtils.h"
 #include "utils/AMLUtils.h"
 #include "guilib/gui3d.h"
 
+static void aml_hdmi_3D_mode(const char *mode3d)
+{
+  CLog::Log(LOGDEBUG, "aml_hdmi_3D_mode: %s", mode3d);
+  aml_set_sysfs_str("/sys/class/amhdmitx/amhdmitx0/config", mode3d);
+  if (strstr(mode3d, "3doff"))
+  {
+    // Some 3D HDTVs will not exit from 3D mode with 3doff
+    char disp_mode[256] = {};
+    if (aml_get_sysfs_str("/sys/class/display/mode", disp_mode, 255) != -1)
+      aml_set_sysfs_str("/sys/class/amhdmitx/amhdmitx0/disp_mode", disp_mode);
+  }
+}
+
 int aml_set_sysfs_str(const char *path, const char *val)
 {
   int fd = open(path, O_CREAT | O_RDWR | O_TRUNC, 0644);
@@ -117,20 +131,80 @@ bool aml_hw3d_present()
   return has_hw3d == 1;
 }
 
-bool aml_3dmode_present(int stereo_mode)
+bool aml_supports_stereo(const int mode)
 {
+  static int last_mode = -1;
+  static bool last_rtn = false;
+  if (last_mode == mode)
+    return last_rtn;
+
+  CLog::Log(LOGDEBUG, "aml_supports_stereo:mode(0x%x)", mode);
   char disp_cap_3d[256] = {};
   if (aml_get_sysfs_str("/sys/class/amhdmitx/amhdmitx0/disp_cap_3d", disp_cap_3d, 255) == -1)
-    return false;
+  {
+    last_rtn = false;
+    last_mode = -1;
+    return last_rtn;
+  }
+
+  if (mode == RENDER_STEREO_MODE_INTERLACED && strstr(disp_cap_3d,"FramePacking"))
+    last_rtn = true;
+  else if (mode == RENDER_STEREO_MODE_SPLIT_HORIZONTAL && strstr(disp_cap_3d,"TopBottom"))
+    last_rtn = true;
+  else if (mode == RENDER_STEREO_MODE_SPLIT_VERTICAL && strstr(disp_cap_3d,"SidebySide"))
+    last_rtn = true;
 
-  if (stereo_mode == RENDER_STEREO_MODE_INTERLACED && strstr(disp_cap_3d,"FramePacking"))
-    return true;
-  else if (stereo_mode == RENDER_STEREO_MODE_SPLIT_HORIZONTAL && strstr(disp_cap_3d,"TopBottom"))
-    return true;
-  else if (stereo_mode == RENDER_STEREO_MODE_SPLIT_VERTICAL && strstr(disp_cap_3d,"SidebySide"))
-    return true;
+  last_mode = mode;
+
+  return last_rtn;
+}
+
+void aml_set_stereo_mode(const int mode, const int view)
+{
+  static int last_mode = -1;
+  // do nothing if mode matches last time someone called us.
+  if (last_mode == mode)
+    return;
+
+  CLog::Log(LOGDEBUG, "aml_set_stereo_mode:mode(0x%x)", mode);
+  if (!aml_supports_stereo(mode))
+  {
+    last_mode = mode;
+    return;
+  }
+
+  switch(mode)
+  {
+    default:
+      aml_hdmi_3D_mode("3doff");
+      break;
+    case RENDER_STEREO_MODE_SPLIT_VERTICAL:
+      aml_hdmi_3D_mode("3dlr");
+      break;
+    case RENDER_STEREO_MODE_SPLIT_HORIZONTAL:
+      aml_hdmi_3D_mode("3dtb");
+      break;
+
+    case RENDER_STEREO_MODE_INTERLACED:
+      {
+        std::string  stereo_mode;
+        switch(CMediaSettings::Get().GetCurrentVideoSettings().m_StereoMode)
+        {
+          case RENDER_STEREO_MODE_SPLIT_VERTICAL:
+            aml_hdmi_3D_mode("3dlr");
+            break;
+          case RENDER_STEREO_MODE_SPLIT_HORIZONTAL:
+            aml_hdmi_3D_mode("3dtb");
+            break;
+          default:
+            aml_hdmi_3D_mode("3doff");
+            break;
+        }
+      }
+      break;
+  }
 
-  return false;
+  return;
 }
 
 bool aml_wired_present()
diff --git a/xbmc/utils/AMLUtils.h b/xbmc/utils/AMLUtils.h
index 5487000..1adab6b 100644
--- a/xbmc/utils/AMLUtils.h
+++ b/xbmc/utils/AMLUtils.h
@@ -47,7 +47,8 @@ int aml_get_sysfs_int(const char *path);
 bool aml_present();
 void aml_permissions();
 bool aml_hw3d_present();
-bool aml_3dmode_present(int stereo_mode);
+bool aml_supports_stereo(const int mode);
+void aml_set_stereo_mode(const int mode, const int view);
 bool aml_wired_present();
 enum AML_DEVICE_TYPE aml_get_device_type();
 void aml_cpufreq_min(bool limit);
diff --git a/xbmc/utils/SystemInfo.cpp b/xbmc/utils/SystemInfo.cpp
index b322191..bf312f9 100644
--- a/xbmc/utils/SystemInfo.cpp
+++ b/xbmc/utils/SystemInfo.cpp
@@ -867,6 +867,23 @@ bool CSysInfo::HasHW3DInterlaced()
   return false;
 }
 
+bool CSysInfo::HWSupportsStereo(const int mode)
+{
+#if defined(TARGET_ANDROID)
+  if (aml_present())
+    return aml_supports_stereo(mode);
+#endif
+  return false;
+}
+
+void CSysInfo::HWSetStereoMode(const int mode, const int view)
+{
+#if defined(TARGET_ANDROID)
+  if (aml_present())
+    aml_set_stereo_mode(mode, view);
+#endif
+}
+
 CSysInfo::WindowsVersion CSysInfo::m_WinVer = WindowsVersionUnknown;
 
 bool CSysInfo::IsWindowsVersion(WindowsVersion ver)
diff --git a/xbmc/utils/SystemInfo.h b/xbmc/utils/SystemInfo.h
index 0a96625..4506a4a 100644
--- a/xbmc/utils/SystemInfo.h
+++ b/xbmc/utils/SystemInfo.h
@@ -114,6 +114,9 @@ public:
   bool HasVideoToolBoxDecoder();
   bool IsAeroDisabled();
   bool HasHW3DInterlaced();
+  bool HWSupportsStereo(const int mode);
+  void HWSetStereoMode(const int mode, const int view);
+
   static bool IsWindowsVersion(WindowsVersion ver);
   static bool IsWindowsVersionAtLeast(WindowsVersion ver);
   static WindowsVersion GetWindowsVersion();
-- 
1.7.10.4

