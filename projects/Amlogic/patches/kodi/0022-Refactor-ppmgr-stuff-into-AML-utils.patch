From 37b83ccdf7ea63ffc2772e8f3d0945588450cb05 Mon Sep 17 00:00:00 2001
From: Trent Nelson <trent.a.b.nelson@gmail.com>
Date: Tue, 11 Mar 2014 17:20:46 -0600
Subject: [PATCH 22/27] Refactor ppmgr stuff into AML utils.

---
 xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp |   53 ++-------------
 xbmc/utils/AMLUtils.cpp                           |   73 +++++++++++++++++++--
 2 files changed, 71 insertions(+), 55 deletions(-)

diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp
index d683e14..0e37cce 100644
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp
@@ -226,16 +226,6 @@ public:
 //-----------------------------------------------------------------------------------
 //-----------------------------------------------------------------------------------
 // AppContext - Application state
-#define MODE_3D_DISABLE         0x00000000
-#define MODE_3D_LR              0x00000101
-#define MODE_3D_LR_SWITCH       0x00000501
-#define MODE_3D_BT              0x00000201
-#define MODE_3D_BT_SWITCH       0x00000601
-#define MODE_3D_TO_2D_L         0x00000102
-#define MODE_3D_TO_2D_R         0x00000902
-#define MODE_3D_TO_2D_T         0x00000202
-#define MODE_3D_TO_2D_B         0x00000a02
-
 #define PTS_FREQ        90000
 #define UNIT_FREQ       96000
 #define AV_SYNC_THRESH  PTS_FREQ*30
@@ -2053,6 +2043,9 @@ std::string CAMLCodec::GetStereoMode()
     default:                                  stereo_mode = m_hints.stereo_mode; break;
   }
 
+  if (CMediaSettings::Get().GetCurrentVideoSettings().m_StereoInvert)
+    stereo_mode = RenderManager::GetStereoModeInvert(stereo_mode);
+
   return stereo_mode;
 }
 
@@ -2168,48 +2161,10 @@ void CAMLCodec::SetVideoRect(const CRect &SrcRect, const CRect &DestRect)
     dst_rect.y2 *= yscale;
   }
 
-  if (m_stereo_mode == RENDER_STEREO_MODE_MONO)
-  {
-    std::string mode = GetStereoMode();
-    if (mode == "left_right")
-      SetVideo3dMode(MODE_3D_TO_2D_L);
-    else if (mode == "right_left")
-      SetVideo3dMode(MODE_3D_TO_2D_R);
-    else if (mode == "top_bottom")
-      SetVideo3dMode(MODE_3D_TO_2D_T);
-    else if (mode == "bottom_top")
-      SetVideo3dMode(MODE_3D_TO_2D_B);
-    else
-      SetVideo3dMode(MODE_3D_DISABLE);
-  }
-  else if (m_stereo_mode == RENDER_STEREO_MODE_SPLIT_VERTICAL)
-  {
+  if (m_stereo_mode == RENDER_STEREO_MODE_SPLIT_VERTICAL)
     dst_rect.x2 *= 2.0;
-    SetVideo3dMode(MODE_3D_DISABLE);
-  }
   else if (m_stereo_mode == RENDER_STEREO_MODE_SPLIT_HORIZONTAL)
-  {
     dst_rect.y2 *= 2.0;
-    SetVideo3dMode(MODE_3D_DISABLE);
-  }
-  else if (m_stereo_mode == RENDER_STEREO_MODE_INTERLACED)
-  {
-    std::string mode = GetStereoMode();
-    if (mode == "left_right")
-      SetVideo3dMode(MODE_3D_LR);
-    else if (mode == "right_left")
-      SetVideo3dMode(MODE_3D_LR_SWITCH);
-    else if (mode == "row_interleaved_lr")
-      SetVideo3dMode(MODE_3D_LR);
-    else if (mode == "row_interleaved_rl")
-      SetVideo3dMode(MODE_3D_LR_SWITCH);
-    else
-      SetVideo3dMode(MODE_3D_DISABLE);
-  }
-  else
-  {
-    SetVideo3dMode(MODE_3D_DISABLE);
-  }
 
 #if 1
   std::string s_dst_rect = StringUtils::Format("%i,%i,%i,%i",
diff --git a/xbmc/utils/AMLUtils.cpp b/xbmc/utils/AMLUtils.cpp
index a80d0c5..4e294fe 100644
--- a/xbmc/utils/AMLUtils.cpp
+++ b/xbmc/utils/AMLUtils.cpp
@@ -33,6 +33,25 @@
 #include "utils/StringUtils.h"
 #include "utils/AMLUtils.h"
 #include "guilib/gui3d.h"
+#include "guilib/StereoscopicsManager.h"
+
+#define MODE_3D_DISABLE         0x00000000
+#define MODE_3D_LR              0x00000101
+#define MODE_3D_LR_SWITCH       0x00000501
+#define MODE_3D_BT              0x00000201
+#define MODE_3D_BT_SWITCH       0x00000601
+#define MODE_3D_TO_2D_L         0x00000102
+#define MODE_3D_TO_2D_R         0x00000902
+#define MODE_3D_TO_2D_T         0x00000202
+#define MODE_3D_TO_2D_B         0x00000a02
+
+static void aml_set_video_3d_mode(const int mode3d)
+{
+  char mode[16] = {};
+  snprintf(mode, sizeof(mode), "0x%08x", mode3d);
+  CLog::Log(LOGDEBUG, "aml_set_video_3d_mode: %s", mode);
+  aml_set_sysfs_str("/sys/class/ppmgr/ppmgr_3d_mode", mode);
+}
 
 static void aml_hdmi_3D_mode(const char *mode3d)
 {
@@ -161,11 +180,17 @@ bool aml_supports_stereo(const int mode)
 
 void aml_set_stereo_mode(const int mode, const int view)
 {
-  static int last_mode = -1;
+  static int  last_mode   = -1;
+  static bool last_invert = false;
+  bool        invert      = CMediaSettings::Get().GetCurrentVideoSettings().m_StereoInvert;
+
   // do nothing if mode matches last time someone called us.
-  if (last_mode == mode)
+  if (last_mode == mode &&
+      last_invert == invert)
     return;
 
+  last_invert = invert;
+
   CLog::Log(LOGDEBUG, "aml_set_stereo_mode:mode(0x%x)", mode);
   if (!aml_supports_stereo(mode))
   {
@@ -175,33 +200,69 @@ void aml_set_stereo_mode(const int mode, const int view)
 
   switch(mode)
   {
-    default:
-      aml_hdmi_3D_mode("3doff");
-      break;
     case RENDER_STEREO_MODE_SPLIT_VERTICAL:
+      aml_set_video_3d_mode(MODE_3D_DISABLE);
       aml_hdmi_3D_mode("3dlr");
       break;
     case RENDER_STEREO_MODE_SPLIT_HORIZONTAL:
+      aml_set_video_3d_mode(MODE_3D_DISABLE);
       aml_hdmi_3D_mode("3dtb");
       break;
 
     case RENDER_STEREO_MODE_INTERLACED:
       {
-        std::string  stereo_mode;
         switch(CMediaSettings::Get().GetCurrentVideoSettings().m_StereoMode)
         {
           case RENDER_STEREO_MODE_SPLIT_VERTICAL:
+            if (invert)
+              aml_set_video_3d_mode(MODE_3D_LR_SWITCH);
+            else
+              aml_set_video_3d_mode(MODE_3D_LR);
             aml_hdmi_3D_mode("3dlr");
             break;
           case RENDER_STEREO_MODE_SPLIT_HORIZONTAL:
+            if (invert)
+              aml_set_video_3d_mode(MODE_3D_BT_SWITCH);
+            else
+              aml_set_video_3d_mode(MODE_3D_BT);
             aml_hdmi_3D_mode("3dtb");
             break;
           default:
+            aml_set_video_3d_mode(MODE_3D_DISABLE);
             aml_hdmi_3D_mode("3doff");
             break;
         }
       }
       break;
+    case RENDER_STEREO_MODE_MONO:
+      {
+        int   stream_mode = (int)CStereoscopicsManager::Get().GetStereoModeOfPlayingVideo();
+        
+        switch (stream_mode)
+        {
+          case RENDER_STEREO_MODE_SPLIT_VERTICAL:
+            if (invert)
+              aml_set_video_3d_mode(MODE_3D_TO_2D_R);
+            else
+              aml_set_video_3d_mode(MODE_3D_TO_2D_L);
+            break;
+          case RENDER_STEREO_MODE_SPLIT_HORIZONTAL:
+            if (invert)
+              aml_set_video_3d_mode(MODE_3D_TO_2D_B);
+            else
+              aml_set_video_3d_mode(MODE_3D_TO_2D_T);
+            break;
+          default:
+            aml_set_video_3d_mode(MODE_3D_DISABLE);
+            break;
+        }
+        aml_hdmi_3D_mode("3doff");
+      }
+      break;
+    default:
+      aml_set_video_3d_mode(MODE_3D_DISABLE);
+      aml_hdmi_3D_mode("3doff");
+      break;
   }
 
   return;
-- 
1.7.10.4

